class Solution {
  int bsearch(vector<int> a,int start,int end,int key)
  {
      int index=-1;
      
      while(end>=start)
      {
          
          int mid=start+(end-start)/2;
          if(a[mid]<=key)
              end=mid-1;
          else
          {
              start=mid+1;
              if(index==-1||a[index]>=a[mid])
                  index=mid;
          }
          
      }
      
     return index; 
  }
public:
    
    void nextPermutation(vector<int>& a) {
        
        int n=a.size();
        if(n==0||n==1)
            return ;
        int i=n-2;
        
        while(i>=0&&a[i]>=a[i+1])
            i--;
        
        if(i<0)
        {
            sort(a.begin(),a.end());
            return ;
        }
        else
        {
           int index=bsearch(a,i+1,n-1 ,a[i]);
              swap(a[i],a[index]);
            reverse(a.begin()+i+1,a.end());
            return ;
            
            
            
        }
    }
};
