#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ff first
#define ss second
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define lli long long int
#define INF 1000000000
#define endl '\n'
const double PI = 3.141592653589793238460;
typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;
using namespace std;
 
vi tree[100001];
int sub[100001];
 
void dfs(int node , int par)
{
	sub[node] = 1;
 
	for(int child : tree[node])
	if(child != par)
	{
		dfs(child , node);
		sub[node] += sub[child];
	}
 
}
 
int main()
{
	int n , a , b;
	cin>>n;
	cin>>a;
  for(int i=2;i<=n;i++)
  {
     cin>>a;
     tree[a].push_back(i);
     tree[i].push_back(a);
  }

	dfs(1 , -1);
   
   vector<int>A(n+1),B(n+1);
   
   for(int i=1;i<=n;i++)
   cin>>A[i];
   
   for(int i=1;i<=n;i++)
   cin>>B[i];
   int cost;
   cin>>cost;
   
   int dp[n+1][cost+1];
   memset(dp,0,sizeof(dp));
   int mx=INT_MIN;
   
   for(int i=1;i<=n;i++)
   {
      for(int j=0;j<=cost;j++)
      {
         if(A[i]<=j)
         {
            dp[i][j]=max(dp[i][j],1+dp[i][j-A[i]]);
         }
         
         if(B[i]<=j)
         {
            dp[i][j]=max(dp[i][j],sub[i]+dp[i][j-B[i]]);
         }
         
         mx=max(mx,dp[i][j]);
      }
   }
   
   cout<<mx<<endl;
 
	
}
