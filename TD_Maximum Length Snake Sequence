/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>


using namespace std;
typedef pair<int, int> point;
#define N 5

vector<point>constructpath(int L[5][5],int grid[5][5],point tail)
{
   int i,j;
   i=tail.first;
   j=tail.second;
   vector<point>ans;
   ans.push_back(tail);
   
   while(L[i][j])
   {
      if((i-1)>=0  && (abs( grid[i][j] - grid[i-1][j])==1 ) &&( L[i][j]=L[i-1][j]==1))
      {
         ans.push_back(make_pair(i-1,j));
         i--;
      }
      
      if((j-1)>=0  && (abs( grid[i][j] - grid[i][j-1])==1)  && ( L[i][j]=L[i-1][j]==1))
      {
         ans.push_back(make_pair(i,j-1));
         j--;
      }
   }
   return ans;
}

vector<point> findMaxLengthSnakeSequence(int grid[5][5])
{
   int L[N][N];
   int max_so_far=0;
   point tail;
   
   for(int i=0;i<N;i++)
   {
      for(int j=0;j<N;j++)
      {
         L[i][j]=0;
         
         if( abs(grid[i][j]-grid[i-1][j])==1)
         {
            
            L[i][j]=max(L[i][j],1+L[i-1][j]);
            
            if(max_so_far<L[i][j])
            {
               max_so_far=L[i][j];
               tail={i,j};
            }
         }
         
         if(abs(grid[i][j]-grid[i][j-1])==1)
         {
            L[i][j]=max(L[i][j],1+L[i][j-1]);
            if(max_so_far<L[i][j])
            {
               max_so_far=L[i][j];
               tail={i,j};
            }
         }
      }
   }
   
   return constructpath(L,grid,tail);
}

int main()
{
    int grid[N][N] =
    {
        { 7, 5, 2, 3, 1 },
        { 3, 4, 1, 4, 4 },
        { 1, 5, 6, 7, 8 },
        { 3, 4, 5, 8, 9 },
        { 3, 2, 2, 7, 6 }
    };
 
    vector<point> path = findMaxLengthSnakeSequence(grid);
 
    cout << "The Maximum length snake sequence is ";
 
    // use reverse iterator to print the vector (from snake's head to tail)
    for (auto it = path.rbegin(); it != path.rend(); it++) {
        cout << grid[it->first][it->second] << " â€” ";
    }
 
    cout << endl << "The length is " << path.size() - 1;
 
    return 0;
}
